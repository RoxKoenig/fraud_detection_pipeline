name: MLOps Pipeline for Fraud Detection with Database Connection

on:
  schedule:
    - cron: '0 0 1 * *'  # Run on the 1st of every month
  workflow_dispatch:  # Allow manual triggering

jobs:
  pipeline:
    name: Fraud Detection MLOps Pipeline with Database Connection
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set Up Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.3'

      # Step 3: Install Python Dependencies
      - name: Install Python dependencies
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install psycopg2

      # Step 4: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Step 5: Clean Up Ports Before Starting Services
      - name: Free Ports 5000 and 5001
        run: |
          echo "Freeing up ports 5000 and 5001..."
          for port in 5000 5001; do
            pid=$(sudo lsof -ti :$port) || true
            if [ -n "$pid" ]; then
              echo "Killing process on port $port (PID: $pid)"
              sudo kill -9 $pid || true
            else
              echo "No process found on port $port."
            fi
          done

      # Step 6: Build and Start Docker Services
      - name: Build and Start Docker Services
        run: |
          docker-compose up --build -d
          echo "Waiting for services to be ready..."

          # Wait for PostgreSQL readiness
          for i in {1..30}; do
            docker exec fraud_detection_db pg_isready -U admin -d fraud_detection_db && break
            echo "PostgreSQL not ready yet. Retrying in 5 seconds..."
            sleep 5
          done

          # Wait for MLflow readiness
          for i in {1..30}; do
            curl --silent --fail http://localhost:5001 || true
            if [ $? -eq 0 ]; then
              echo "MLflow server is ready."
              break
            fi
            echo "MLflow server not ready yet. Retrying in 5 seconds..."
            sleep 5
          done

      # Step 7: Show Logs on Failure
      - name: Show Logs on Failure
        if: failure()
        run: |
          echo "Showing PostgreSQL logs..."
          docker logs fraud_detection_db || true

          echo "Showing MLflow logs..."
          docker logs mlflow_server || true

      # Step 8: Load Database Backup
      - name: Load Database Backup
        env:
          DB_USER: admin
          DB_PASSWORD: password
          DB_NAME: fraud_detection_db
        run: |
          if [ -f "fraud_detection_db_backup.sql" ]; then
            echo "Loading database backup..."
            docker exec -i fraud_detection_db psql -U $DB_USER -d $DB_NAME < fraud_detection_db_backup.sql
          else
            echo "⚠️ Database backup file not found. Skipping database restore step."
          fi

      # Step 9: Run MLOps Pipeline Steps
      - name: Run MLOps Pipeline
        env:
          DB_NAME: fraud_detection_db
          DB_USER: admin
          DB_PASSWORD: password
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          source .venv/bin/activate

          echo "Generating monthly data..."
          python generate_monthly_data.py --month 1 --output_path output.csv

          echo "Detecting data drift..."
          python data_drift.py

          echo "Running main pipeline script..."
          python main.py

          echo "Retraining model..."
          python retrain.py

          echo "Deploying model..."
          for port in 5000; do
            pid=$(sudo lsof -ti :$port) || true
            if [ -n "$pid" ]; then
              echo "Freeing port $port before deployment..."
              sudo kill -9 $pid || true
            fi
          done
          python deploy_model.py

      # Step 10: Notify Team on Success
      - name: Notify Team on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: your-slack-channel-id
          text: "✅ MLOps pipeline completed successfully with database integration and model deployment!"
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}

      # Step 11: Notify Team on Failure
      - name: Notify Team on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: your-slack-channel-id
          text: "❌ MLOps pipeline failed. Check the logs for details."
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}

      # Step 12: Clean Up Docker Containers
      - name: Clean Up Docker Containers
        run: |
          echo "Cleaning up Docker containers..."
          docker-compose down

